import unittest

from project_cryptography import rsa_calculate_private_key

class RsaCalculatePrivateKey(unittest.TestCase):

    def test_1(self):
        e = 65537
        p = 12640723380680263506027342998514795020899069462900067048893245439976831459046533425949457112242763598074047493197657497117660181493930936491517798209535007
        q = 10701193555450365626620498121662349727740637983427503667672950705022721216701248906298234075293104349663010928263989439078519314471810903541239646975150721
        d_expected = 65508423114527705471515219354247210928302799665746319574243751911513631844199158077824344546117270662030459285587024602093679952296847306311595279599866462743476154623449734589198078864099386659696078473150454327272615557847613502341176606718461007322869486881074721806780191835250210516850629763513513713153

        d = rsa_calculate_private_key(e, p, q)
        self.assertEqual(d, d_expected)

    def test_2(self):
        e = 65537
        p = 12345566883504994465253319701495536704958283699917362385397993779280717473251050696024542200003535606990680429610868917775635137001362874116695959292193389
        q = 10959649201085976015101289141415465788217498925453392461672693651598368612054693066501013667996918465939582190993952364806803208308225536387291534598833789
        d_expected = 119598204887098869319972586866479144183913946748263432786435095109237253694068069458845109047594386373356426631084972802815302495062226369310070687944377491011558039163359990820756239979392773877929909262635416243469901561131224149283238082081110870240003571171965053489434571135350272081727091068405116665633

        d = rsa_calculate_private_key(e, p, q)
        self.assertEqual(d, d_expected)

if __name__ == '__main__':
    unittest.main()
