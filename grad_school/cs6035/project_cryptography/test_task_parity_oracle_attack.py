import unittest

from project_cryptography import rsa_parity_oracle_attack


class RsaParityOracleAttack(unittest.TestCase):

    def test_1(self):
        c = 71160777461103655144450025950626290871441128849596568955179106499608056334278588429738466465593623769961903967887656547830226761305502682560741140175804919754111856675658784797196787778326680376751985599008114760080394270354811754041318747542752258855231375882996540254863488410382363058514831481638509453022
        N = 138675612769898219355947960526350182260353183373503397129547760949849318372667933324877147995900271149906373840433467375996297547348009648327367050197361956611880243642859834190756014422916855072567289779969272661326156518943558249372836360294751794920367993405628089097955097754562445649083677728543900986537
        e = 65537
        m_expected = "There's always money in the banana stand"

        def parity_oracle(chosen_c: int):
            m = pow(chosen_c, 44981707680584957307608553105408428437227641975585321515783851904601931885288843349867073746080045838300649939727705715533657220524650031343259056000358880794961621762059373426546376285953919107762128657509011816184877086083933819046535746111247745734636843507086412280534005760053567249373441752267795125673,
                    138675612769898219355947960526350182260353183373503397129547760949849318372667933324877147995900271149906373840433467375996297547348009648327367050197361956611880243642859834190756014422916855072567289779969272661326156518943558249372836360294751794920367993405628089097955097754562445649083677728543900986537)
            if m % 2 == 0:
                return True
            return False

        m = rsa_parity_oracle_attack(c, N, e, parity_oracle)
        self.assertEqual(m, m_expected)


if __name__ == '__main__':
    unittest.main()
